* Finding Your Way Around Kali 

/bin - basic programs (Is, cd, cat, etc.)
/sbin- system programs (fdisk, mkfs, sysctl, etc)
/etc - configuration flies
/tmp- temporary files (typically deleted on boot)
/usr/bin - applications (apt, neat, nmap, etc.)
/usr/share- application support and data files


* Basic Linux Commands
---

 Listing Files 
 
 ls - List files in directory
ls -ltr - Sort list by last modified. -time -reverse
file - Show info about file. What type of file it is. If it is a binary or text file for example.
cat - Output content of file.
less - Output file but just little bit at a time. Use this one. Not more.
Use /searchterm to search. It is the same command as in vim. n to scroll to next search result. Press q to quit.
more - Output file but just little bit at a time. less is better.

---
Navigating

pwd - Print working directory
cd - Change directory
cd ~ - Change directory to your home directory


---


A little bit of everything
history - Show commands history

----


Working with files
touch - Create a new file.
cp - Copy
mkdir - Make directory.
mkdir -p  Make entire directory structure
rm - Remove file 
rm -rf  Remove recursively and its content. Very dangerous command!

----

Finding Files

Find 
Find is slower than locate but a lot more thorough. You can search for files recursively and with regex and a lot of other features.
# This will send all permissions denied outputs to dev/null.
find / -name file 2>/dev/null

Locate
Locate is really fast because it relies on an internal database. So in order to have it updated you need to run:
sudo updatedb

Then you can easily find stuff like this:
locate filename

Which
Outputs the path of the binary that you are looking for. It searches through the directories that are defined in your $PATH variable.
which bash 

----

Managing Kali Linux Services

SSH Service
The Secure SHell (SSH)
43 service is most commonly used to remotely access a computer, using a
secure, encrypted protocol. The SSH service is TCP-based and listens by default on port 22. To
start the SSH service in Kali, we run systemctl with the start option followed by the service name
(ssh in this example):
kali@kali:-$ sudo systemctl start ssh

If we want to have the SSH service start automatically at boot time (as many users prefer), we
simply enable it using the systemctl command. However, be sure to change the default password
first!
kali@kali:-$ sudo systemctl enable ssh 




HTTP Service

The Apache HTTP service is often used during a penetration test, either for hosting a site, or
providing a platform for downloading files to a victim machine. The HTTP service is TCP-based and 
listens by default on port 80. To start the HTTP service in Kali, we can use systemctl. as we did
when starting the SSH service, replacing the service name with "apache2·:
kali@kali:~S sudo systemctl start apache2 

To have the HTTP service start at boot time, much like with the SSH service, we need to explicitly
enable it with systemctl. and its enable option:
ka1i@kali: ~$ sudo systemctl enable apache2


Most services in Kali Linux are operated in much the same way as SSH and HTTP, through their
service or init scripts. To see a table of all available services, run systemctl with the list-unitfi\es option:
kali@kali:~s systemctl list-unit-files 


-------


Install package

Example of how to install something with apt:
kali@kali:~$ sudo apt-get install nmap

Remove packages
This can be tricky. First find the package
kali@kali:~$ dpkg --list

Then you find it in your list.
kali@kali:~$ sudo apt-get --purge remove nameOfProgram


update the list of  available packages

kali@kali:~$ sudo apt update 


 upgrade the installed packages and core system
to the latest versions using the  apt upgrade command such as apt upgrade metasploit-framework.


 apt-cache search command displays much of the information stored in the internal cached
package database. For example, let's say we would like to install the pure-ftpd application via APT.
The first thing we have to do is to find out whether or not the application is present in the Kali Linux
repositories

kali@kali:-$ apt-cache search pure-ftpd 

To confirm that the resource-agents package description really contains the "pure-ftpd· keyword,
pass the package name to apt show as follows:
kali@kali:~$ apt s how resource-agent s 


 dpkg
dpkg is the core tool used to install a package  it does not require an Internet connection.
kali@kali:-$ sudo dpkg -i man-db_2.1.e.2-s_amd64.deb 

------------------



The Bash Environment 

kali@kali:-$ echo $PATH
/usr/local/sbi n:/usr/local/bin:/usr/sbin:/usr/bin :/sbin:/bin
Listing 28 · Using echo to display the PATH environment variable
Some other useful environment variables include USER. PWD. and HOME, which hold the values of
the current terminal user's username, present working directory, and home directory respectively:
kali@kali:-$ echo $USER
kali
kali@kali:~$ echo $PWD
/home/kali
kali@kali:-$ echo $HOME
/home/kali 


An environment variable can be defined with the export command. For example, if we are scanning
a target and don't want to type in the system's IP address repeatedly, we can quickly assign it an
environment variable and use that instead: 

kali@kali:~$ export b=le.11.1.220
kali@ka1i:~$ ping -c 2 $b
PING 10.11.1.220 (10.11.1.220) 56(84) bytes of data.
64 bytes from 10.11.1.220: icmp_seq=l ttl=62 time=2.23 ms
64 bytes from 10.11.1.220: icmp_seq=2 ttl=62 time=l.56 ms
--- 10.11.1.220 ping statistics ---
2 packets transmitted, 2 recei ved , 0% packet loss, time 1002ms
rtt min/avg/max/mdev = 1.563/1.900/2.238/0.340 ms

We will use the $$ variable to display the process ID of the current shell instance to make sure that
we are indeed issuing commands in two different shells:
kali@kali:~$ echo"$$"
1827
kali@ka1 i: ~$ var="My Var"
kali@kali:~$ echo $var
My Var
kali@kal i:~$ bash
kali@kali:-$ echo"$$"
1908
kali@kali:-$ echo $var
kali@kali:- $ exit
exit
kali@kali:~$ echo $var
My Var
kali@kali:~$ export othervar="Global Var"
kali@ka1i:~$ echo $othervar
Global Var
kali@kali:~$ bash
kali@kali:~$ echo $othervar
Gl obal Var
kali@kali:-$ exit
exi t
kali@kali:~$ 


There are many other environment variables defined by default in Kali Linux. We can view these by
running env at the command line:
kali@kali:~$ env
SHELL=/bin/bash
PWD=/home/kali
XDG_SESSION_DESKTOP=lightdm-xsession
LOGNAME=kali
XDG_SESSION_TYPE=xll
XAUTHORITY=/home/kal i/.Xauthority
XDG_GREETER_DATA_DIR=/var/lib/lightdm/data/kali
HOME= /home/kali
TERM=xte rm-256color
USER=kali 



Bash maintains a history of commands that have been entered,
which can be displayed with the history command.

kali@kali:~$ history
1 cat /etc/lsb-release
2 clear
3 history

Another helpful history shortcut is ! !, which repeats the last command that was executed during
our termf nal sessf on:
kali@kali:~$ sudo systemct\ restart apache2
kali@kal i :~$ ! !
sudo systemctl restart apache2
kali@kali:~$ 

*By default. the command history is saved to the .baslulistory file in the user home directory. Two
environment variables control the history size: Hf STSf ZE and HfSTFf LESfZE


---------------


 Piping and Redirection

kali@kali:~$ t s
Desktop Documents Downloads Music Pictures Public Templates Videos
kali@kali:~$ echo "test"
test
kali@kali:~$ echo "test" > redirection_test.txt
kali@kali:~$ t s
Desktop Documents Downloads Music Pictures Public redirection_test.txt Template
kali@kali:~$ cat redirection_test.txt
test
kali@kali:~$ e cho "Kati Linux i s an open source project" > redirection_test.txt
kali@kali:~$ cat redirection_test .t xt
Kali Linux is an open source project


Redirecting to an Existing File
To append additional data to an existing file ( as opposed to overwriting the file) use the > > operator:
kali@kali:~$ echo "that is maintained and funded by Offensive Security" » redi rection
_test.txt
kali@kali:~$ cat redirection_test,txt
Kali Linux is an open source project
that is maintained and funded by Offensive Security 



Redirecting from a File

kali @kali:~$ wc -m < redirection_test.txt
89


Redirecting STDERR

kali@kali:~$ ls •
Desktop Documents Downloads Music Pictures Public redirection_test.txt Template
kali@kali:~$ l s , / test
ls: cannot access '/test': No such file or directory
kali@kali:~$ ls . / test 2>error.txt
kali@kali:~$ cat error.txt
ls: cannot access '/test': No such file or directory

-----------

Piping
 let's have a look at how to redirect the output from one command into the input of another. Consider this example:
kali@kali:~$ cat error.txt
ls: cannot access '/test': No such file or directory
kali@kali:~$ cat error.txt wc -m
53
kali@kali:~$ cat error.txt wc -m > count .t xt
kali@kali:~$ cat count.t xt
53 

-----------


Text Searching and Manipulation

 grep 
 
 
kali@kali:-$ ls - la /usr/bin I grep zip
-rwxr-xr-x 3 root root 34480 Jan 29 2017 bunzip2
-rwxr-xr-x 3 root root 34480 Jan 29 2017 bzip2
-rwxr-xr-x 1 root root 13864 Jan 29 2017 bzip2recover
-rwxr-xr-x 2 root root 2301 Mar 14 2016 gunzip
-rwxr-xr-x 1 root root 105172 Mar 14 2016 gzip


sed 
kali@kali:-$ echo "I need to try hard" I sed 's/hard/harder/'
I need to try harder

cut
kali@kali:-$ echo "I hack binades,web apps,mobile apps, and just about anything else"
| cut - f 2 - d ","
web apps 

kali@kali:-$ cut -d ":" -f 1 /etc/passwd
root
daemon
bin 

 awk 
 
 kali@kali:~$ echo "hetto::there::friend" | awk -F "::" '{print $1, $3}'
hello friend 

 







